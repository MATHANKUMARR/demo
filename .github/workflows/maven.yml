# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Project CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  print-token:
    permissions: write-all
    name: print-token
    environment: dev
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn clean install

    - name: Build & push Docker image
      uses: mr-smithers-excellent/docker-build-push@v6
      with:
        image: rmathankumarcpm/demo
        tags: latest
        registry: docker.io
        dockerfile: Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: 'latest'
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true

    - name: Authenticate with GCP
      run: |
        echo "$GCP_SA_KEY" > gcp-key.json
        gcloud auth activate-service-account --key-file=gcp-key.json
      env:
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker CLI
      run: gcloud auth configure-docker -q

    - name: Install gcloud components
      run: |
        gcloud components install kubectl
        gcloud components install kubectl-credential-gke

    - name: Set kubectl context
      run: gcloud container clusters get-credentials docker-k8s-demo --zone us-central1

    - name: Deploy to GKE
      run: kubectl apply -f docker-k8s-demo.yaml
